<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EM.Bases</name>
    </assembly>
    <members>
        <member name="T:EM.Bases.AssemblyExtensions">
            <summary>
            程序集扩展
            </summary>
        </member>
        <member name="P:EM.Bases.AssemblyExtensions.DirectoryAndAssemblies">
            <summary>
            目录和程序集集合字典
            </summary>
        </member>
        <member name="M:EM.Bases.AssemblyExtensions.CopyEmbeddedResourceToFile(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            拷贝嵌入资源至文件
            </summary>
            <param name="assembly">程序集</param>
            <param name="resourceName">资源名</param>
            <param name="destFilename">文件路径</param>
            <returns>成功true反之false</returns>
        </member>
        <member name="M:EM.Bases.AssemblyExtensions.CreateInstance(System.Reflection.Assembly,System.Type)">
            <summary>
            创建实例
            </summary>
            <param name="assembly"></param>
            <param name="destType"></param>
            <returns></returns>
        </member>
        <member name="M:EM.Bases.AssemblyExtensions.CreateInstance``1(System.String)">
            <summary>
            从文件中读取dll创建实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:EM.Bases.AssemblyExtensions.IsAssignable(System.Reflection.Assembly,System.Type)">
            <summary>
            程序集是否可分配指定类型实例
            </summary>
            <param name="assembly"></param>
            <param name="destType"></param>
            <returns></returns>
        </member>
        <member name="M:EM.Bases.AssemblyExtensions.GetAssembly(System.String,System.String)">
            <summary>
            获取指定名称的程序集
            </summary>
            <param name="directory">目录</param>
            <param name="assemblyName">程序集名称</param>
            <returns>程序集</returns>
        </member>
        <member name="M:EM.Bases.AssemblyExtensions.GetAssignableAssembly``1(System.String)">
            <summary>
            获取可分配指定类型的程序集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:EM.Bases.AssemblyExtensions.GetAssemblies(System.String,System.String[])">
            <summary>
            获取指定名称的程序集
            </summary>
            <param name="directory">目录</param>
            <param name="extensions">扩展</param>
            <returns>程序集</returns>
        </member>
        <member name="M:EM.Bases.AssemblyExtensions.GetAssemblies(System.String,System.IO.SearchOption)">
            <summary>
            获取指定名称的程序集
            </summary>
            <param name="directory">目录</param>
            <param name="searchOption">查找模式</param>
            <returns>程序集</returns>
        </member>
        <member name="M:EM.Bases.AssemblyExtensions.GetTypes``1(System.String,System.IO.SearchOption)">
            <summary>
            获取类型集合
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="directory">目录</param>
            <param name="searchOption">查找模式</param>
            <returns>类型集合</returns>
        </member>
        <member name="T:EM.Bases.CopyExtensions">
            <summary>
            拷贝扩展
            </summary>
        </member>
        <member name="M:EM.Bases.CopyExtensions.Copy``1(``0)">
            <summary>
            拷贝一份副本
            </summary>
            <typeparam name="T"></typeparam>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:EM.Bases.CopyExtensions.DistinctNames(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            返回不同名称的属性信息数组
            </summary>
            <param name="allProperties">所有属性</param>
            <returns>属性数组</returns>
        </member>
        <member name="M:EM.Bases.CopyExtensions.CopyTo(System.Object,System.Object,System.Reflection.BindingFlags)">
            <summary>
            将源对象的属性和字段拷贝给目标对象
            </summary>
            <param name="src">源对象</param>
            <param name="copy">目标对象</param>
            <param name="bindingFlags">绑定标记</param>
        </member>
        <member name="T:EM.Bases.DelegateCommand`1">
            <summary>
            泛型委托命令
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="E:EM.Bases.DelegateCommand`1.CanExecuteChanged">
            <summary>
            能否执行改变事件
            </summary>
        </member>
        <member name="M:EM.Bases.DelegateCommand`1.#ctor(System.Action)">
            <summary>
            实例化委托命令
            </summary>
            <param name="execute">执行委托</param>
        </member>
        <member name="M:EM.Bases.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            实例化委托命令
            </summary>
            <param name="execute">执行委托</param>
        </member>
        <member name="M:EM.Bases.DelegateCommand`1.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            实例化委托命令
            </summary>
            <param name="execute">执行委托</param>
            <param name="canExecute">能否执行委托</param>
        </member>
        <member name="M:EM.Bases.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            实例化委托命令
            </summary>
            <param name="execute">执行委托</param>
            <param name="canExecute">能否执行委托</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:EM.Bases.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            判断是否能执行
            </summary>
            <param name="parameter">参数</param>
            <returns>返回是或否</returns>
        </member>
        <member name="M:EM.Bases.DelegateCommand`1.Execute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="parameter">参数</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:EM.Bases.DelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
            触发执行改变事件
            </summary>
        </member>
        <member name="M:EM.Bases.DelegateCommand`1.OnCanExecuteChanged(System.EventArgs)">
            <summary>
            触发执行改变事件
            </summary>
            <param name="e">参数</param>
        </member>
        <member name="T:EM.Bases.DelegateCommand">
            <summary>
            委托命令
            </summary>
        </member>
        <member name="M:EM.Bases.DelegateCommand.#ctor(System.Action)">
            <summary>
            实例化委托命令
            </summary>
            <param name="execute">执行委托</param>
        </member>
        <member name="M:EM.Bases.DelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            实例化委托命令
            </summary>
            <param name="execute">执行委托</param>
        </member>
        <member name="M:EM.Bases.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            实例化委托命令
            </summary>
            <param name="execute">执行委托</param>
            <param name="canExecute">是否可执行</param>
        </member>
        <member name="M:EM.Bases.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            实例化委托命令
            </summary>
            <param name="execute">执行委托</param>
            <param name="canExecute">是否可执行</param>
        </member>
        <member name="T:EM.Bases.BaseCopy">
            <summary>
            可拷贝基类
            </summary>
        </member>
        <member name="M:EM.Bases.BaseCopy.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:EM.Bases.BaseCopy.OnCopy(System.Object)">
            <summary>
            将当前对象拷贝到目标对象
            </summary>
            <param name="copy">目标对象</param>
        </member>
        <member name="M:EM.Bases.BaseCopy.CopyProperties(System.Object)">
            <summary>
            拷贝属性
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:EM.Bases.GroupItem">
            <summary>
            分组元素
            </summary>
        </member>
        <member name="P:EM.Bases.GroupItem.Children">
            <inheritdoc/>
        </member>
        <member name="T:EM.Bases.GroupItem`2">
            <summary>
            分组元素
            </summary>
            <typeparam name="TItem">元素类型</typeparam>
            <typeparam name="TChildren">子元素类型</typeparam>
        </member>
        <member name="P:EM.Bases.GroupItem`2.Children">
            <inheritdoc/>
        </member>
        <member name="T:EM.Bases.ItemCollection`1">
            <summary>
            元素集合
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="P:EM.Bases.ItemCollection`1.Items">
            <summary>
            元素集合
            </summary>
        </member>
        <member name="P:EM.Bases.ItemCollection`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:EM.Bases.ItemCollection`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:EM.Bases.ItemCollection`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="E:EM.Bases.ItemCollection`1.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="M:EM.Bases.ItemCollection`1.#ctor">
            <summary>
            实例化元素集合
            </summary>
        </member>
        <member name="M:EM.Bases.ItemCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:EM.Bases.ItemCollection`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EM.Bases.ItemCollection`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:EM.Bases.ItemCollection`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EM.Bases.ItemCollection`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EM.Bases.ItemCollection`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:EM.Bases.ItemCollection`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:EM.Bases.ItemCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:EM.Bases.ItemCollection`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="T:EM.Bases.ItemCollection">
            <summary>
            元素集合
            </summary>
        </member>
        <member name="T:EM.Bases.NotifyClass">
            <summary>
            通知类
            </summary>
        </member>
        <member name="E:EM.Bases.NotifyClass.PropertyChanged">
            <summary>
            属性改变后的事件
            </summary>
        </member>
        <member name="M:EM.Bases.NotifyClass.SetProperty``1(``0@,``0,System.String)">
            <summary>
            设置值并调用属性改变通知
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="t">变量</param>
            <param name="value">值</param>
            <param name="propertyName">属性名称</param>
            <returns>成功true，反之false</returns>
        </member>
        <member name="M:EM.Bases.NotifyClass.OnPropertyChanged(System.String)">
            <summary>
            触发属性改变后事件的方法
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="T:EM.Bases.SelectableItem`1">
            <summary>
            泛型可选择的元素
            </summary>
            <typeparam name="T">元素类型</typeparam>
        </member>
        <member name="P:EM.Bases.SelectableItem`1.Item">
            <summary>
            元素
            </summary>
        </member>
        <member name="M:EM.Bases.SelectableItem`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EM.Bases.SelectableItem">
            <summary>
            可选择的元素
            </summary>
        </member>
        <member name="P:EM.Bases.SelectableItem.Text">
            <inheritdoc/>
        </member>
        <member name="P:EM.Bases.SelectableItem.IsSelected">
            <inheritdoc/>
        </member>
        <member name="M:EM.Bases.SelectableItem.ToString">
            <inheritdoc/>
        </member>
        <member name="T:EM.Bases.TreeItem">
            <summary>
            泛型树元素
            </summary>
        </member>
        <member name="P:EM.Bases.TreeItem.Parent">
            <inheritdoc/>
        </member>
        <member name="P:EM.Bases.TreeItem.Level">
            <inheritdoc/>
        </member>
        <member name="P:EM.Bases.TreeItem.IsVisible">
            <inheritdoc/>
        </member>
        <member name="P:EM.Bases.TreeItem.IsExpanded">
            <inheritdoc/>
        </member>
        <member name="T:EM.Bases.IBaseItem">
            <summary>
            基础元素
            </summary>
        </member>
        <member name="P:EM.Bases.IBaseItem.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="T:EM.Bases.IBaseItem`1">
            <summary>
            泛型基础元素
            </summary>
            <typeparam name="T">元素类型</typeparam>
        </member>
        <member name="P:EM.Bases.IBaseItem`1.Item">
            <summary>
            元素
            </summary>
        </member>
        <member name="T:EM.Bases.IGroupItem">
            <summary>
            组元素
            </summary>
        </member>
        <member name="P:EM.Bases.IGroupItem.Children">
            <summary>
            子元素集合
            </summary>
        </member>
        <member name="T:EM.Bases.IGroupItem`2">
            <summary>
            组元素
            </summary>
            <typeparam name="TItem">元素类型</typeparam>
            <typeparam name="TChildren">子元素类型</typeparam>
        </member>
        <member name="P:EM.Bases.IGroupItem`2.Children">
            <summary>
            子元素集合
            </summary>
        </member>
        <member name="T:EM.Bases.IItemCollection`1">
            <summary>
            可通知的集合
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="T:EM.Bases.IItemCollection">
            <summary>
            可通知的集合
            </summary>
        </member>
        <member name="T:EM.Bases.IParent`1">
            <summary>
            带父元素的接口
            </summary>
            <typeparam name="T">父元素类型</typeparam>
        </member>
        <member name="P:EM.Bases.IParent`1.Parent">
            <summary>
            父元素
            </summary>
        </member>
        <member name="T:EM.Bases.ISelectableItem">
            <summary>
            可选择项的接口
            </summary>
        </member>
        <member name="P:EM.Bases.ISelectableItem.IsSelected">
            <summary>
            是否已选择
            </summary>
        </member>
        <member name="T:EM.Bases.ISelectableItem`1">
            <summary>
            泛型可选择项的接口
            </summary>
            <typeparam name="T">指定类型</typeparam>
        </member>
        <member name="T:EM.Bases.ITreeItem">
            <summary>
            树节点元素接口
            </summary>
        </member>
        <member name="T:EM.Bases.ItreeItemInfo">
            <summary>
            树节点信息接口
            </summary>
        </member>
        <member name="P:EM.Bases.ItreeItemInfo.IsExpanded">
            <summary>
            是否展开
            </summary>
        </member>
        <member name="P:EM.Bases.ItreeItemInfo.IsVisible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="P:EM.Bases.ItreeItemInfo.Level">
            <summary>
            级别
            </summary>
        </member>
        <member name="T:EM.Bases.KeyValueClass`2">
            <summary>
            键值类
            </summary>
        </member>
        <member name="P:EM.Bases.KeyValueClass`2.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:EM.Bases.KeyValueClass`2.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:EM.Bases.ObjectExtensions">
            <summary>
            对象扩展
            </summary>
        </member>
        <member name="M:EM.Bases.ObjectExtensions.TryGetInt(System.Object,System.Int32@)">
            <summary>
            尝试获取值
            </summary>
            <param name="obj">对象</param>
            <param name="value">值</param>
            <returns>成功true反之false</returns>
        </member>
        <member name="M:EM.Bases.ObjectExtensions.TryGetLong(System.Object,System.Int64@)">
            <summary>
            尝试获取值
            </summary>
            <param name="obj">对象</param>
            <param name="value">值</param>
            <returns>成功true反之false</returns>
        </member>
        <member name="M:EM.Bases.ObjectExtensions.TryGetFloat(System.Object,System.Single@)">
            <summary>
            尝试获取值
            </summary>
            <param name="obj">对象</param>
            <param name="value">值</param>
            <returns>成功true反之false</returns>
        </member>
        <member name="M:EM.Bases.ObjectExtensions.TryGetDouble(System.Object,System.Double@)">
            <summary>
            尝试获取值
            </summary>
            <param name="obj">对象</param>
            <param name="value">值</param>
            <returns>成功true反之false</returns>
        </member>
        <member name="M:EM.Bases.ObjectExtensions.TryGetString(System.Object,System.String@)">
            <summary>
            尝试获取值
            </summary>
            <param name="obj">对象</param>
            <param name="value">值</param>
            <returns>成功true反之false</returns>
        </member>
        <member name="M:EM.Bases.ObjectExtensions.ForceSetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            强制设置属性的值(数字之间可转换)
            </summary>
            <param name="propertyInfo">属性信息</param>
            <param name="destObj">目标对象</param>
            <param name="value">值</param>
        </member>
        <member name="T:EM.Bases.SnowflakeId">
            <summary>
            雪花算法类
            </summary>
        </member>
        <member name="P:EM.Bases.SnowflakeId.Default">
            <summary>
            默认实例
            </summary>
        </member>
    </members>
</doc>
